import "util.scrypt";
import "swapUtil.scrypt";
import "rabinUtil.scrypt";
import "txUtil.scrypt";

//opReturn + "lp address"
contract SwapAddLiquidity {
    bytes swapContractID;
    bytes fetchTokenContractHash;
    int[3] rabinPubKeyArray;
    bytes tokenID;

    /**
     * add liquidity from contract
     * @function unlock
    */
    public function unlock(
        SigHashPreimage txPreimage, 
        bytes prevouts,
        int tokenInputIndex,
        bytes tokenScript, // token input locking script 
        bytes lpTokenScript,
        bytes tokenRabinMsg,
        bytes[3] tokenPaddingArray,
        int[3] tokenSigArray,
        int swapInputIndex,
        bytes swapLockingScript, // swap input locking script
        bytes swapRabinMsg,
        bytes[3] swapPaddingArray,
        int[3] swapSigArray,
        int bsvAddAmount, 
        int lpTokenInputSatoshis,
        int changeSatoshis,
        Ripemd160 changeAddress
    ) {
        require(Tx.checkPreimage(txPreimage));

        // check prevouts
        require(hash256(prevouts) == Util.hashPrevouts(txPreimage));

        require(bsvAddAmount > 0);

        // get the sender lpAccount
        bytes lockingScript = Util.scriptCode(txPreimage);
        int scriptLen = len(lockingScript);
        bytes sender = lockingScript[scriptLen - 20: scriptLen];

        int swapInputSatoshis = RabinUtil.getMsgOutputSatoshis(swapRabinMsg);

        // use oralce to verify the swap contract input
        require(RabinUtil.checkOutputPoint(prevouts, swapInputIndex, swapRabinMsg));
        require(hash160(swapLockingScript) == RabinUtil.getMsgLockingScriptHash(swapRabinMsg));

        // verify the swap contract ID
        require(this.swapContractID == RabinUtil.getMsgUniqueID(swapRabinMsg));

        int swapVerifyCount = RabinUtil.verifyMsgThree(this.rabinPubKeyArray, swapRabinMsg, swapPaddingArray, swapSigArray);
        require(swapVerifyCount >= 2);

        scriptLen = len(swapLockingScript);
        int poolTokenAmount = SwapUtil.getTokenAmount(swapLockingScript, scriptLen);
        int totalLpAmount = SwapUtil.getLpAmount(swapLockingScript, scriptLen);

        // verify token input from oracle rabin msg
        require(RabinUtil.checkOutputPoint(prevouts, tokenInputIndex, tokenRabinMsg));
        require(hash160(tokenScript) == RabinUtil.getMsgLockingScriptHash(tokenRabinMsg));
        require(this.tokenID == RabinUtil.getMsgTokenID(tokenRabinMsg));

        int tokenVerifyCount = RabinUtil.verifyMsgThree(this.rabinPubKeyArray, tokenRabinMsg, tokenPaddingArray, tokenSigArray);
        require(tokenVerifyCount >= 2);

        int tokenInputSatoshis = RabinUtil.getMsgOutputSatoshis(tokenRabinMsg);
        int tokenInputAmount = RabinUtil.getMsgTokenAmount(tokenRabinMsg);

        int swapOutputSatoshis = swapInputSatoshis + bsvAddAmount;
        int lpMinted = 0;
        // mint the lp token 
        if (poolTokenAmount > 0) {
            // check bsvAddAmount and tokenInputAmount at current ratio
            require(tokenInputAmount >= poolTokenAmount * bsvAddAmount / swapInputSatoshis);
            lpMinted = bsvAddAmount * totalLpAmount / swapInputSatoshis;
            if (lpMinted == 0) {
                lpMinted = 1;
            }
        }
        else {
            // first mint max 10000
            lpMinted = poolTokenAmount;
            if (lpMinted > 10000) {
                lpMinted = 10000;
            }
        }
        int newTotalLpAmount = totalLpAmount + lpMinted;
        int newPoolTokenAmount = tokenInputAmount + poolTokenAmount;

        // swap contract output
        bytes newSwapScript = SwapUtil.genNewSwapContract(swapLockingScript, newPoolTokenAmount, newTotalLpAmount);
        bytes swapOutput = Util.buildOutput(newSwapScript, swapOutputSatoshis);

        // token output
        bytes newTokenScript = TokenProto.getNewTokenScript(tokenScript, len(tokenScript), this.fetchTokenContractHash, tokenInputAmount);
        bytes tokenOutput = Util.buildOutput(newTokenScript, tokenInputSatoshis);

        // lp token output
        bytes newLpTokenScript = TokenProto.getNewTokenScript(lpTokenScript, len(lpTokenScript), sender, lpMinted);
        bytes lpTokenOutput = Util.buildOutput(newLpTokenScript, lpTokenInputSatoshis);

        // bsv change output
        bytes changeOutput = b'';
        if (changeSatoshis > 0) {
            bytes outputScript = Util.buildPublicKeyHashScript(changeAddress);
            changeOutput = Util.buildOutput(outputScript, changeSatoshis);
        }

        bytes outputs = swapOutput + tokenOutput + lpTokenOutput + changeOutput;
        require(hash256(outputs) == Util.hashOutputs(txPreimage));
    }
}