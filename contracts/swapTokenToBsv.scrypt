import "util.scrypt";
import "swapUtil.scrypt";
import "rabinUtil.scrypt";
import "txUtil.scrypt";

contract SwapTokenToBsv {
    bytes swapContractID;
    bytes tokenID;
    bytes swapFetchTokenHash;
    int[3] rabinPubKeyArray;
    int feeRate;

    public function unlock(
        SigHashPreimage txPreimage, 
        bytes prevouts,
        int tokenInputIndex,
        bytes tokenLockingScript, // token input locking script 
        bytes tokenRabinMsg,
        bytes[3] tokenPaddingArray,
        int[3] tokenSigArray,
        int swapInputIndex,
        bytes swapLockingScript, // swap input locking script
        bytes swapRabinMsg,
        bytes[3] swapPaddingArray,
        int[3] swapSigArray,
        int bsvSwapSatoshis,
        int changeSatoshis,
        Ripemd160 changeAddress
    ) {
        require(Tx.checkPreimage(txPreimage));

        // check prevouts
        require(hash256(prevouts) == Util.hashPrevouts(txPreimage));

        require(changeSatoshis >= 0);
        require(bsvSwapSatoshis >= 0);

        // verify swap contract
        int swapInputSatoshis = RabinUtil.getMsgOutputSatoshis(swapRabinMsg);
        require(RabinUtil.checkOutputPoint(prevouts, swapInputIndex, swapRabinMsg));
        require(hash160(swapLockingScript) == RabinUtil.getMsgLockingScriptHash(swapRabinMsg));

        // verify the swap contract ID
        require(this.swapContractID == RabinUtil.getMsgUniqueID(swapRabinMsg));

        int swapVerifyCount = RabinUtil.verifyMsgThree(this.rabinPubKeyArray, swapRabinMsg, swapPaddingArray, swapSigArray);
        require(swapVerifyCount >= 2);

        int scriptLen = len(swapLockingScript);
        int poolTokenAmount = SwapUtil.getTokenAmount(swapLockingScript, scriptLen);
        int totalLpAmount = SwapUtil.getLpAmount(swapLockingScript, scriptLen);

        // verify token input
        require(RabinUtil.checkOutputPoint(prevouts, tokenInputIndex, tokenRabinMsg));
        require(hash160(tokenLockingScript) == RabinUtil.getMsgLockingScriptHash(tokenRabinMsg));
        require(this.tokenID == RabinUtil.getMsgTokenID(tokenRabinMsg));

        int tokenVerifyCount = RabinUtil.verifyMsgThree(this.rabinPubKeyArray, tokenRabinMsg, tokenPaddingArray, tokenSigArray);
        require(tokenVerifyCount >= 2);

        int tokenInputSatoshis = RabinUtil.getMsgOutputSatoshis(tokenRabinMsg);
        int tokenInputAmount = RabinUtil.getMsgTokenAmount(tokenRabinMsg);

        // get the bsv amount
        int tokenInputWithFee = tokenInputAmount * (SwapUtil.SWAP_FEE_FACTOR - this.feeRate);
        int bsvOutputSatoshis = tokenInputWithFee * swapInputSatoshis / (poolTokenAmount * SwapUtil.SWAP_FEE_FACTOR + tokenInputWithFee);

        int swapOutputSatoshis = swapInputSatoshis - bsvSwapSatoshis;
        int newPoolTokenAmount = poolTokenAmount + tokenInputAmount;

        // swap contract output
        bytes newSwapScript = SwapUtil.genNewSwapContract(swapLockingScript, poolTokenAmount, totalLpAmount);
        bytes swapOutput = Util.buildOutput(newSwapScript, swapOutputSatoshis);

        // token output
        bytes newTokenScript = TokenProto.getNewTokenScript(tokenLockingScript, len(tokenLockingScript), this.swapFetchTokenHash, tokenInputAmount);
        bytes tokenOutput = Util.buildOutput(newTokenScript, tokenInputSatoshis);

        // bsv change output
        bytes changeOutput = b'';
        if (changeSatoshis > 0) {
            bytes outputScript = Util.buildPublicKeyHashScript(changeAddress);
            changeOutput = Util.buildOutput(outputScript, changeSatoshis);
        }

        bytes outputs = swapOutput + tokenOutput + changeOutput;
        require(hash256(outputs) == Util.hashOutputs(txPreimage));
    }
}